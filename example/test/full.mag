import std
import std.io

data Rec1 = Ctor1(Rec2) ;
data Rec2 = Ctor2(Rec1) ;
data Nat = O | S(Nat);

test_if: () -> i32 {
    if true { 1 } else { 2 }
}

test_nested_if: () -> i32 {
    let i: i32 = 0;
    if i != 1 {
        i + 2
    } else {
        if i != 3 {
            i + 4
        } else {
            i + 5
        }
    }
}

test_while: () -> i32 {
    let i: i32 = 0;
    while i < 100 {
        i = i + 1;
    };
    i
}

test_for: () -> i32 {
    let sum: i32 = 0;
    for i in 0 .. 10 {
        sum = sum + i;
    };
    sum
}

test_nested_for: () -> i32 {
    let sum: i32 = 0;
    for i in 0 .. 10 {
        for j in -99 .. 100 {
            sum = sum + i + j;
        };
    };
    sum
}

test_break: () -> i32 {
    let i : i32 = 0;
    while true {
        if i > 10 {
            break;
        };
        i = i + 1;
    };
    i
}

test_continue: () -> i32 {
    let i : i32 = 0;
    let sum: i32 = 0;
    while i < 10 {
        sum = sum + 1;
        if i == 0 {
            i = 9;
            continue;
        };
        i = i + 1;
    };
    sum
}

test_float: () -> f64 {
    2.33
}

test_int_convert_float: () -> f64 {
    2
}

test_tuple: () -> (i32, f64, str) {
    (0, 1.2, "tuple")
}

test_nat_ctor_1: () -> Nat {
    O
}

test_nat_ctor_2: (n: Nat) -> Nat {
    S(n)
}

test_array: () -> [i32] {
    let arr: [i32] = std.array.new(5, \ (_: i32) -> i32 => 2);
    arr[0] = 1;
    arr
}

test_complex_array: () -> [[i32]] {
    let arr: [[i32]] = std.array.new(5, \ (_: i32) -> [i32] => std.array.new(5, \ (_: i32) -> i32 => 0));
    for i in 0 .. 5 {
        io.println(i);
        arr[i][i] = i;
    };
    arr
}

test_wildcard: (_: i32) -> i32 {
    let _ : i32 = 0;
    let i: i32 = 1;
    for _ in 0 .. 1 {
        i = i + 1;
    };
    i
}

test_closure: () -> i32 -> () -> i32 {
    let fv: i32 = 1;
    let x: i32 = 2;
    \ (x: i32) -> () -> i32 => {
        \ () -> i32 => {
            io.println(fv + x);
            fv + x
        }
    }
}

test_closure_pass: (closure: () -> i32) -> i32 {
    closure()
}

test_closure_call: () -> i32 {
    let c: () -> i32 -> () -> i32 =
        \ () -> i32 -> () -> i32 => {
            test_closure()
        };
    let c: () -> i32 = c()(10);
    if 2 == c() {
        1
    } else {
        test_closure_pass(test_closure()(0))
    }
}

test_match_i32: (x: i32) -> i32 {
    match x {
        0 => 1,
        1 => 2,
        _ => 114514
    }
}

test_match_i32_literal: () -> i32 {
    match 1 {
        1 => 1,
        _ => 2
    }
}

test_match_str: (x: str) -> i32 {
    match x {
        "1" => { if true { 10010 } else { 10086 }},
        "2" => 2,
        "3" => 3,
        _ => 0
    }
}

test_normal_match: (x: Nat) -> i32 {
    match x {
        O => 0,
        S(O) => 1,
        S(S(x)) => 2 + test_normal_match(x)
    }
}

test_tuple_match: (a: Nat, b: Nat) -> bool {
    match (a, b) {
        (O, O) => true,
        (S(x), S(y)) => test_tuple_match(x, y),
        (_, _) => false
    }
}

test_type_implicit_casting: (a: i32, b: f64) -> f64 {
    a + b
}

test_equality: (a: str, b: i32, c: f64) -> bool {
    a == "test" || b == 0 || c == 0
}

test_fib: (n: i32) -> i32 {
    if n == 0 || n == 1 {
        1
    } else {
        test_fib(n - 1) + test_fib(n - 2)
    }
}

test_string_split: () -> [str] {
    std.string.split("a,b,c,d,e,f,g", ",")
}

test_int_convert_nat: (x: i32) -> Nat {
    let m: Nat = O;
    for i in 0 .. x {
        m = S(m);
    };
    m
}

main: () -> () {
    io.println(test_equality("test", 0, 0.0) == true);
    io.println(test_if() == 1);
    io.println(test_nested_if() == 2);
    io.println(test_while() == 100);
    io.println(test_for() == 45);
    io.println(test_nested_for() == 8955);
    io.println(test_break() == 11);
    io.println(test_continue() == 2);
    io.println(test_float() == 2.33);
    io.println(test_int_convert_float() == 2.0);
    io.println(test_tuple());
    io.println(test_nat_ctor_1());
    io.println(test_nat_ctor_2(test_nat_ctor_1()));
    io.println(test_wildcard(10086) == 2);
    io.println(test_closure()(10)() == 11);
    io.println(test_closure_call() == 1);
    io.println((test_match_i32(0), test_match_i32(1), test_match_i32(2), test_match_i32(3)));
    io.println(test_match_i32_literal() == 1);
    io.println((test_match_str("1"), test_match_str("2"), test_match_str("3")));
    io.println(
        (
            test_normal_match(O),
            test_normal_match(S(O)),
            test_normal_match(S(S(O))),
            test_normal_match(S(S(S(O)))),
            test_normal_match(S(S(S(S(O)))))
        )
    );
    io.println(
        (
            test_tuple_match(S(O), O) == false,
            test_tuple_match(O, O) == true,
            test_tuple_match(S(O), S(O)) == true
        )
    );
    io.println(test_type_implicit_casting(1, 2.0));
    io.println(test_fib(30));
    io.println(test_string_split());
    io.println(test_array());
    io.println(test_complex_array());
    io.println(test_normal_match(test_int_convert_nat(10)));
}
